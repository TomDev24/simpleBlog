{"version":3,"sources":["components/Editor/Editor.js","components/Posts/Posts.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["Editor","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","heading","text","handleClick","bind","assertThisInitialized","takeName","takeText","inherits","createClass","key","value","onClick","alert","e","setState","target","react_default","a","createElement","className","onChange","type","id","cols","rows","React","Component","Posts","apply","arguments","posts","Header","App","handlePost","name","post","concat","toConsumableArray","Header_Header_Header","Editor_Editor_Editor","Posts_Posts_Posts","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d29d8711.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Editor.css\"\r\n\r\nexport class Editor extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      heading: \"\",\r\n      text: \"\"\r\n    }\r\n    this.handleClick=this.handleClick.bind(this);\r\n    this.takeName=this.takeName.bind(this);\r\n    this.takeText=this.takeText.bind(this);\r\n  }\r\n  handleClick(){\r\n    if (!this.state.heading || !this.state.text){\r\n      alert(\"Ошибка. Введите название и содержание статьи\")\r\n    } else{\r\n    this.props.onClick(this.state.heading,this.state.text)\r\n  }\r\n  }\r\n  takeName(e){\r\n    this.setState({\r\n      heading: e.target.value\r\n    })\r\n  }\r\n  takeText(e){\r\n    this.setState({\r\n      text: e.target.value\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"editor\">\r\n        <p className=\"white\">Название статьи</p>\r\n        <input onChange={this.takeName}\r\n        type=\"text\" id=\"post-name\"/>\r\n        <p className=\"white\">Содержание</p>\r\n        <textarea onChange={this.takeText}\r\n        cols=\"50\" rows=\"10\" id=\"post\">\r\n        </textarea>\r\n        <input type=\"submit\" onClick={this.handleClick}\r\n        value=\"Done\" id=\"btn\" />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./Posts.css\";\r\n\r\nexport class Posts extends React.Component{\r\n  render(){\r\n    return(\r\n    <div className=\"post-container\">\r\n      {this.props.posts}\r\n    </div>\r\n  )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./Header.css\"\r\n\r\nexport class Header extends React.Component{\r\n  render(){\r\n    return(\r\n      <div className=\"logo\">\r\n        <h1>SimpleBlog</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport {Editor} from \"./components/Editor/Editor\";\nimport {Posts} from \"./components/Posts/Posts\"\nimport {Header} from \"./components/Header/Header\"\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      posts: []\n    };\n    this.handlePost=this.handlePost.bind(this);\n  }\n\n  handlePost(name,text){\n    let post = <div className=\"post animated slideInLeft\">\n     <h1>{name}</h1>\n     <hr/>\n     <p>{text}</p>\n     </div>;\n     this.setState({\n       posts: [...this.state.posts, post]\n     })\n  }\n  render(){\n    return(\n      <div>\n      <Header />\n      <Editor onClick={this.handlePost}/>\n      <Posts posts={this.state.posts} />\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}